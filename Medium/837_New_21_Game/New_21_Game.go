package question837

/*
	837. 新21点
	爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：
	爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。
	当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？
 */

/*
	思路: 动态规划 [1, W], 每抽一次问题规模变为 [0 ~ K - r]，这样从 0 1开始往上加值就好 概率啊啊啊啊啊啊！！！！！
	题解:
		还是递归，不过按填格子的方法从后算的，这个真没想到，下面按这个来
*/

func new21Game(N int, K int, W int) float64 {
	dp := make([]float64, K + W)
	var sum float64 // 用于记录 dp[x+1]+dp[x+2]+dp[x+3]...+dp[x+w] 省的之后累加  每次向前移动只需要去掉末尾 添加头就好
	// 设置初始状态 K 到 K+W-1 的胜率值
	for i := K; i <= K + W - 1; i++ {
		if i <= N {
			dp[i] = 1
		} else {
			dp[i] = 0
		}
		sum += dp[i]
	}

	// 由后往前递推
	for i := K - 1; i >= 0; i-- {
		dp[i] = sum / float64(W)
		sum = sum - dp[i+W] + dp[i]
	}
	return dp[0]
}